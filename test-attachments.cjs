#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å attachments –ø—Ä–æ–µ–∫—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-attachments.js
 */

const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env.local
const envPath = path.join(__dirname, '.env.local');
if (!fs.existsSync(envPath)) {
    console.error('‚ùå –§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω');
    process.exit(1);
}

const envContent = fs.readFileSync(envPath, 'utf-8');
const DIRECTUS_URL = envContent.match(/VITE_DIRECTUS_URL=(.+)/)?.[1]?.trim();
const DIRECTUS_TOKEN = envContent.match(/VITE_DIRECTUS_(?:STATIC_)?TOKEN=(.+)/)?.[1]?.trim();

if (!DIRECTUS_URL || !DIRECTUS_TOKEN) {
    console.error('‚ùå DIRECTUS_URL –∏–ª–∏ DIRECTUS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env.local');
    process.exit(1);
}

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Directus...');
console.log(`üìç URL: ${DIRECTUS_URL}`);

async function testAttachments() {
    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        console.log('\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
        const projectsResponse = await fetch(
            `${DIRECTUS_URL}/items/projects?fields=id,name,attachments.*&deep[attachments][_fields]=id,projects_id,directus_files_id.*,url,title`,
            {
                headers: {
                    'Authorization': `Bearer ${DIRECTUS_TOKEN}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        if (!projectsResponse.ok) {
            throw new Error(`HTTP ${projectsResponse.status}: ${await projectsResponse.text()}`);
        }

        const projectsData = await projectsResponse.json();
        const projects = projectsData.data;

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å attachments
        const projectWithAttachments = projects.find(p => p.attachments && p.attachments.length > 0);
        if (projectWithAttachments) {
            console.log('\nüìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö attachment:');
            console.log(JSON.stringify(projectWithAttachments.attachments[0], null, 2));
        }

        // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º attachments
        console.log('\n2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ attachments...');
        let totalAttachments = 0;
        let fileAttachments = 0;
        let linkAttachments = 0;
        let invalidAttachments = 0;

        projects.forEach(project => {
            const attachments = project.attachments || [];
            totalAttachments += attachments.length;

            attachments.forEach(att => {
                if (att.directus_files_id) {
                    fileAttachments++;
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ directus_files_id - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
                    if (typeof att.directus_files_id === 'string') {
                        console.warn(`‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç "${project.name}": directus_files_id - —Å—Ç—Ä–æ–∫–∞, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç`);
                        invalidAttachments++;
                    } else if (!att.directus_files_id.id) {
                        console.warn(`‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç "${project.name}": directus_files_id –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç id`);
                        invalidAttachments++;
                    }
                } else if (att.url) {
                    linkAttachments++;
                } else {
                    console.warn(`‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç "${project.name}": attachment –±–µ–∑ —Ñ–∞–π–ª–∞ –∏ —Å—Å—ã–ª–∫–∏`);
                    invalidAttachments++;
                }
            });

            if (attachments.length > 0) {
                console.log(`   üìé ${project.name}: ${attachments.length} –≤–ª–æ–∂–µ–Ω–∏–π`);
            }
        });

        console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   –í—Å–µ–≥–æ attachments: ${totalAttachments}`);
        console.log(`   –§–∞–π–ª–æ–≤: ${fileAttachments}`);
        console.log(`   –°—Å—ã–ª–æ–∫: ${linkAttachments}`);
        console.log(`   –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: ${invalidAttachments}`);

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º junction table
        console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ junction table...');
        const junctionResponse = await fetch(
            `${DIRECTUS_URL}/items/projects_files?fields=*`,
            {
                headers: {
                    'Authorization': `Bearer ${DIRECTUS_TOKEN}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        if (junctionResponse.ok) {
            const junctionData = await junctionResponse.json();
            console.log(`‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ projects_files: ${junctionData.data.length}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            const fileIds = new Map();
            junctionData.data.forEach(record => {
                const key = `${record.projects_id}-${record.directus_files_id}`;
                if (fileIds.has(key)) {
                    console.warn(`‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç: –ø—Ä–æ–µ–∫—Ç ${record.projects_id}, —Ñ–∞–π–ª ${record.directus_files_id}`);
                }
                fileIds.set(key, record.id);
            });
        } else {
            console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ projects_files');
        }

        // 4. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\n' + '='.repeat(50));
        if (invalidAttachments === 0) {
            console.log('‚úÖ –í—Å–µ attachments –≤–∞–ª–∏–¥–Ω—ã!');
        } else {
            console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${invalidAttachments} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö attachments`);
            console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
        }

    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

testAttachments();
